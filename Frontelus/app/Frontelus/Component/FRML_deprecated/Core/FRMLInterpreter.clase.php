<?php

namespace Frontelus\Component\FRML\Core;

use Frontelus\Library\Collection;
use Frontelus\Boot;

class FRMLInterpreter
{

    private $stack;
    private $data;
    private $delimeter;
    private $command;
    private $info;
    private $tools;

    public function __construct()
    {
        $this->tools = new Collection(Boot::$APP_PATH . Boot::$DS);
        $this->delimeter = array('%{', '}%');
        $this->stack = new FRMLStack();
        $this->command = new FRMLCommander($this->stack, $this->tools);
        $this->info = '';
    }

    /**
     * =========================================================================
     * @desc parse a FRML String
     * @author Daniel Morales danyelmorales1991@gmail.com
     * @required FRMLInterpreter
     * @param String $data
     * @return void 
     * =========================================================================
     */
    public function bake($data)
    {
        $this->data = $data;
        $this->getInstructionsByLine();
        $this->info = base64_encode($this->command->render());
    }

    /**
     * =========================================================================
     * @desc load and parse a FRML String from a file
     * @author Daniel Morales danyelmorales1991@gmail.com
     * @required FRMLInterpreter
     * @param String $file
     * @return void 
     * =========================================================================
     */
    public function load($file)
    {
        if (!$this->isFRMLFile($file))
        {
            return FALSE;
        }

        $value = $this->tools->getContent($file);
        $this->bake($value, "");
        return TRUE;
    }

    /**
     * =========================================================================
     * @desc determines if the name of a file is a FRML valid extension
     * @author Daniel Morales danyelmorales1991@gmail.com
     * @required FRMLInterpreter
     * @param String $file
     * @return Bool 
     * =========================================================================
     */
    public function isFRMLFile($file)
    {
        if ($file !== NULL)
        {
            if ($this->tools->getExtension($file) === 'frml')
            {
                return TRUE;
            }
        }
        return FALSE;
    }

    /**
     * =========================================================================
     * @desc returns the data generated by the parser
     * @author Daniel Morales danyelmorales1991@gmail.com
     * @required FRMLInterpreter
     * @param 
     * @return String 
     * =========================================================================
     */
    public function getInfo()
    {
        return base64_decode($this->info);
    }

    private function getInstructionsByLine()
    {
        $instructionStack = array_filter(preg_split("/[;]+/", $this->data));
        foreach ($instructionStack as $instruction)
        {
            $stack = array();
            parse_str($instruction, $stack);
            $this->stack->pushArr($stack);
        }
    }

    private function parseInstruction($value)
    {
        $stack = array();
        $instruction = $this->tools->getStringBetween($value, $this->delimeter[0], $this->delimeter[1]);
        parse_str($instruction, $stack);
        $this->stack->pushArr($stack);
    }

}
